{
    "pipes": [],
    "interfaces": [
        {
            "name": "PositionModel",
            "id": "interface-PositionModel-9b0f9214b01039e622463b3a699479b9fb11f0876a9409eb74ee09377d6372ad36b9a7a4f74e32b8cacd6eec92831d6c80134a821d0b91ba552bfda8cac0ae64",
            "file": "src/app/ngx-focus-point/models/position.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PositionModel {\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  h: number;\r\n  s?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "h",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "s",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "w",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "Size",
            "id": "interface-Size-efe783edc3d4d5531bbd5ecddbadc779551c9e9514e79d9db49e04e6543c6ea73c6808356bd865f61d4b25e6528fe4817c5e0acde924039bb4a2b0c6882a13ad",
            "file": "src/app/ngx-focus-point/services/on-resize.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable} from \"@angular/core\";\r\n\r\ninterface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class OnResizeService {\r\n  readonly resizeEventName = \"resize\";\r\n  readonly sizeCacheKey = \"currentSize\";\r\n  public elements: Array<HTMLElement> | undefined;\r\n  private animationFrameHandle: undefined | any;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  public onResize(htmlElements: Array<HTMLElement>): Array<HTMLElement> {\r\n    this.elements = htmlElements;\r\n    this.start();\r\n    return this.elements;\r\n  }\r\n\r\n  public start(skipStop = false) {\r\n    try {\r\n      if (!skipStop) {\r\n        this.stop();\r\n      }\r\n      (this.elements as Array<HTMLElement>)\r\n        .filter((element) => this.isElementInViewport(element))\r\n        .forEach((element) => {\r\n          const previousSize = this.getDataFromElement(element, this.sizeCacheKey);\r\n          const currentSize = this.getSizeFromElement(element);\r\n          if (previousSize && this.checkSizeDiff(currentSize, previousSize)) {\r\n            element.dispatchEvent(\r\n              new CustomEvent(this.resizeEventName, {\r\n                detail: currentSize\r\n              })\r\n            );\r\n          }\r\n\r\n          this.setDataInElement(element, this.sizeCacheKey, currentSize);\r\n        });\r\n\r\n      // this.app.isStable.pipe(first((isStable) => isStable === true)).subscribe((isStable) => {\r\n      //   if (isStable) {\r\n      //     if (this.isWindowAvailable()) {\r\n      //       this.animationFrameHandle = requestAnimationFrame(() => this.start(true));\r\n      //     } else {\r\n      //       this.animationFrameHandle = setTimeout(() => this.start(true), 1000 / 60);\r\n      //     }\r\n      //   } else {\r\n      //     this.stop();\r\n      //   }\r\n      // });\r\n      if (this.isWindowAvailable()) {\r\n        this.animationFrameHandle = requestAnimationFrame(() => this.start(true));\r\n      } else {\r\n        this.animationFrameHandle = setTimeout(() => this.start(true), 1000 / 60);\r\n      }\r\n    } catch (e) {\r\n    }\r\n  }\r\n\r\n  public isWindowAvailable() {\r\n    try {\r\n      if (window === undefined) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public stop() {\r\n    try {\r\n      window.cancelAnimationFrame(this.animationFrameHandle);\r\n    } catch (e) {\r\n      clearInterval(this.animationFrameHandle);\r\n    }\r\n  }\r\n\r\n  public isElementInViewport(element: HTMLElement) {\r\n    try {\r\n      const rect = element.getBoundingClientRect();\r\n      const windowHeight = window.innerHeight || document.documentElement.clientHeight;\r\n      const windowWidth = window.innerWidth || document.documentElement.clientWidth;\r\n      // http://stackoverflow.com/questions/325933/determine-whether-two-date-ranges-overlap\r\n      const vertInView = rect.top <= windowHeight && rect.top + rect.height >= 0;\r\n      const horInView = rect.left <= windowWidth && rect.left + rect.width >= 0;\r\n      return vertInView && horInView;\r\n    } catch (e) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  public setDataInElement(element: HTMLElement, key: string, value: any) {\r\n    element.dataset[key] = JSON.stringify(value);\r\n  }\r\n\r\n  public getDataFromElement(element: HTMLElement, key: string): any | undefined {\r\n    return element.dataset[key] ? JSON.parse(element.dataset[key] as string) : undefined;\r\n  }\r\n\r\n  public checkSizeDiff(size1: Size, size2: Size) {\r\n    return size1?.width !== size2?.width || size1?.height !== size2?.height;\r\n  }\r\n\r\n  public getSizeFromElement(element: HTMLElement): Size {\r\n    try {\r\n      const computedStyles = window.getComputedStyle(element);\r\n      return {\r\n        width: parseInt(computedStyles.width, 10),\r\n        height: parseInt(computedStyles.height, 10)\r\n      };\r\n    } catch (e) {\r\n      return {\r\n        width: 0,\r\n        height: 0\r\n      };\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "OnResizeService",
            "id": "injectable-OnResizeService-efe783edc3d4d5531bbd5ecddbadc779551c9e9514e79d9db49e04e6543c6ea73c6808356bd865f61d4b25e6528fe4817c5e0acde924039bb4a2b0c6882a13ad",
            "file": "src/app/ngx-focus-point/services/on-resize.service.ts",
            "properties": [
                {
                    "name": "animationFrameHandle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "undefined | any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "elements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<HTMLElement> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "resizeEventName",
                    "defaultValue": "\"resize\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        146
                    ]
                },
                {
                    "name": "sizeCacheKey",
                    "defaultValue": "\"currentSize\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        146
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkSizeDiff",
                    "args": [
                        {
                            "name": "size1",
                            "type": "Size",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "size2",
                            "type": "Size",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "size1",
                            "type": "Size",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "size2",
                            "type": "Size",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDataFromElement",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any | undefined",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSizeFromElement",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Size",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isElementInViewport",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isWindowAvailable",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onResize",
                    "args": [
                        {
                            "name": "htmlElements",
                            "type": "Array<HTMLElement>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<HTMLElement>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "htmlElements",
                            "type": "Array<HTMLElement>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDataInElement",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "start",
                    "args": [
                        {
                            "name": "skipStop",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "skipStop",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from \"@angular/core\";\r\n\r\ninterface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\nexport class OnResizeService {\r\n  readonly resizeEventName = \"resize\";\r\n  readonly sizeCacheKey = \"currentSize\";\r\n  public elements: Array<HTMLElement> | undefined;\r\n  private animationFrameHandle: undefined | any;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  public onResize(htmlElements: Array<HTMLElement>): Array<HTMLElement> {\r\n    this.elements = htmlElements;\r\n    this.start();\r\n    return this.elements;\r\n  }\r\n\r\n  public start(skipStop = false) {\r\n    try {\r\n      if (!skipStop) {\r\n        this.stop();\r\n      }\r\n      (this.elements as Array<HTMLElement>)\r\n        .filter((element) => this.isElementInViewport(element))\r\n        .forEach((element) => {\r\n          const previousSize = this.getDataFromElement(element, this.sizeCacheKey);\r\n          const currentSize = this.getSizeFromElement(element);\r\n          if (previousSize && this.checkSizeDiff(currentSize, previousSize)) {\r\n            element.dispatchEvent(\r\n              new CustomEvent(this.resizeEventName, {\r\n                detail: currentSize\r\n              })\r\n            );\r\n          }\r\n\r\n          this.setDataInElement(element, this.sizeCacheKey, currentSize);\r\n        });\r\n\r\n      // this.app.isStable.pipe(first((isStable) => isStable === true)).subscribe((isStable) => {\r\n      //   if (isStable) {\r\n      //     if (this.isWindowAvailable()) {\r\n      //       this.animationFrameHandle = requestAnimationFrame(() => this.start(true));\r\n      //     } else {\r\n      //       this.animationFrameHandle = setTimeout(() => this.start(true), 1000 / 60);\r\n      //     }\r\n      //   } else {\r\n      //     this.stop();\r\n      //   }\r\n      // });\r\n      if (this.isWindowAvailable()) {\r\n        this.animationFrameHandle = requestAnimationFrame(() => this.start(true));\r\n      } else {\r\n        this.animationFrameHandle = setTimeout(() => this.start(true), 1000 / 60);\r\n      }\r\n    } catch (e) {\r\n    }\r\n  }\r\n\r\n  public isWindowAvailable() {\r\n    try {\r\n      if (window === undefined) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public stop() {\r\n    try {\r\n      window.cancelAnimationFrame(this.animationFrameHandle);\r\n    } catch (e) {\r\n      clearInterval(this.animationFrameHandle);\r\n    }\r\n  }\r\n\r\n  public isElementInViewport(element: HTMLElement) {\r\n    try {\r\n      const rect = element.getBoundingClientRect();\r\n      const windowHeight = window.innerHeight || document.documentElement.clientHeight;\r\n      const windowWidth = window.innerWidth || document.documentElement.clientWidth;\r\n      // http://stackoverflow.com/questions/325933/determine-whether-two-date-ranges-overlap\r\n      const vertInView = rect.top <= windowHeight && rect.top + rect.height >= 0;\r\n      const horInView = rect.left <= windowWidth && rect.left + rect.width >= 0;\r\n      return vertInView && horInView;\r\n    } catch (e) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  public setDataInElement(element: HTMLElement, key: string, value: any) {\r\n    element.dataset[key] = JSON.stringify(value);\r\n  }\r\n\r\n  public getDataFromElement(element: HTMLElement, key: string): any | undefined {\r\n    return element.dataset[key] ? JSON.parse(element.dataset[key] as string) : undefined;\r\n  }\r\n\r\n  public checkSizeDiff(size1: Size, size2: Size) {\r\n    return size1?.width !== size2?.width || size1?.height !== size2?.height;\r\n  }\r\n\r\n  public getSizeFromElement(element: HTMLElement): Size {\r\n    try {\r\n      const computedStyles = window.getComputedStyle(element);\r\n      return {\r\n        width: parseInt(computedStyles.width, 10),\r\n        height: parseInt(computedStyles.height, 10)\r\n      };\r\n    } catch (e) {\r\n      return {\r\n        width: 0,\r\n        height: 0\r\n      };\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "type": "injectable"
        },
        {
            "name": "PlatformService",
            "id": "injectable-PlatformService-c613ffabc4521e10dbcd38d4b26ae1df07b3e380f53680e9adc37173d2dad8a1341d55771b0622ee8f51ccef79ae94f7cb9256beb2ac5d8d28da5df81313cb65",
            "file": "src/app/ngx-focus-point/services/platform.service.ts",
            "properties": [
                {
                    "name": "isPlatformBrowser",
                    "defaultValue": "isPlatformBrowser(this.platformID)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isPlatformServer",
                    "defaultValue": "isPlatformServer(this.platformID)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\r\n//\r\nimport {isPlatformBrowser, isPlatformServer} from '@angular/common';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PlatformService {\r\n  public isPlatformBrowser = isPlatformBrowser(this.platformID);\r\n  public isPlatformServer = isPlatformServer(this.platformID);\r\n\r\n  constructor(\r\n    @Inject(PLATFORM_ID) private platformID: object,\r\n  ) {\r\n\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platformID",
                        "type": "object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "platformID",
                        "type": "object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-59e232a1b33884f033f9e4a362f00940e38dd2513ccf2da4972ad10f63eaffcd8661a9443a27cf1579069ce0831331e0464ad3f715b09c5e223ece21aca14f4e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormControl | any",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PositionModel | undefined",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "preset",
                    "defaultValue": "{x: -0.39, y: 0.13, w: 0, h: 0, s: 1}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "routes$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "src",
                    "defaultValue": "new UntypedFormControl(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormControl",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'NGX-Focus-Point'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeUpdatePosition",
                    "args": [
                        {
                            "name": "$event",
                            "type": "PositionModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "PositionModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { PositionModel } from './ngx-focus-point/models/position.model';\r\nimport { UntypedFormControl } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements OnInit, OnDestroy {\r\n  title = 'NGX-Focus-Point';\r\n  public position: PositionModel | undefined;\r\n  public routes$: Subscription | undefined;\r\n  public src: UntypedFormControl = new UntypedFormControl(null);\r\n  public data: UntypedFormControl | any;\r\n  public preset = {x: -0.39, y: 0.13, w: 0, h: 0, s: 1};\r\n\r\n  constructor(private route: ActivatedRoute) {}\r\n\r\n  ngOnInit(): void {\r\n    this.data = new UntypedFormControl(JSON.stringify(this.position, null, 2));\r\n    this.routes$ = this.route.queryParams\r\n      .pipe(\r\n        tap((params) => {\r\n          this.src.setValue(\r\n            params.hasOwnProperty('src')\r\n              ? params['src'].toString()\r\n              : 'https://66.media.tumblr.com/8fd2436a90888b09af3c1eeefe8ef250/tumblr_p6ud1vgk6g1qjac96o1_1280.jpg',\r\n          );\r\n\r\n          // setTimeout(() => {\r\n          //   this.src.setValue('https://www.boredpanda.com/blog/wp-content/uploads/2018/03/The-artist-spent-the-last-decade-composing-one-image-per-day-5aaa29f3771ed__880.jpg')\r\n          // }, 9000)\r\n        }),\r\n      )\r\n      .subscribe();\r\n  }\r\n  ngOnDestroy(): void {\r\n    if(this.routes$){\r\n      this.routes$.unsubscribe();\r\n    }\r\n  }\r\n\r\n  public onChangeUpdatePosition($event: PositionModel) {\r\n    console.log('event', $event);\r\n    this.position = $event;\r\n    if (this.data) {\r\n      this.data.setValue(JSON.stringify(this.position, null, 2));\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  height: 100%;\r\n  width: 100%;\r\n  .select-container{\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: auto;\r\n    width: 160px;\r\n    opacity: 0.7;\r\n    z-index: 1;\r\n    @media(min-width: 996px) {\r\n      width: 200px;\r\n      opacity: 1.0;\r\n    }\r\n  }\r\n  input{\r\n    width: 100%;\r\n  }\r\n  .large{\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  .small {\r\n    width: 160px;\r\n    height:  160px;\r\n    position: absolute;\r\n    right: 0;\r\n    bottom: 0;\r\n    z-index: 1;\r\n  }\r\n\r\n  .resizable-element {\r\n    border: 5px solid white;\r\n    padding: 10px;\r\n    width: 300px;\r\n    height: 300px;\r\n    resize: both;\r\n    overflow: auto;\r\n    position: absolute;\r\n    transform: translate3d(-50%, -50%, 0);\r\n    left: 50%;\r\n    top: 50%;\r\n    z-index: 2;\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!--\r\n<ngx-focus-point-select (change)=\"onChangeUpdatePosition($event)\" src=\"http://natewhitehill.com/wp-content/uploads/2013/08/ultimate-seattle-wallpaper.jpg\">\r\n\r\n</ngx-focus-point-select>\r\n\r\n\r\n<ngx-focus-point class=\"small\" [focusX]=\"position.x\"\r\n                 [focusY]=\"position.y\"\r\n>\r\n  <img\r\n    [src]=\"\r\n      'http://natewhitehill.com/wp-content/uploads/2013/08/ultimate-seattle-wallpaper.jpg'\r\n    \"\r\n    alt=\"\"\r\n  />\r\n\r\n</ngx-focus-point>\r\n\r\n-->\r\n\r\n\r\n<div class=\"select-container \" style='width: 334px'>\r\n  <ngx-focus-point-select\r\n    class=\"select\"\r\n    [enableScale]='true'\r\n    [selectPosition]='preset'\r\n    (positionChange)=\"onChangeUpdatePosition($event)\"\r\n    [src]=\"src.value\">\r\n\r\n  </ngx-focus-point-select>\r\n  <input type=\"text\" [formControl]=\"src\">\r\n  <input type=\"text\" [formControl]=\"data\">\r\n</div>\r\n\r\n\r\n<div class='resizable-element'>\r\n  <ngx-focus-point\r\n    animation='1s'\r\n    [focusX]=\"position?.x\"\r\n    [focusY]=\"position?.y\"\r\n    [scale]='position?.s'\r\n  >\r\n    <img\r\n      [src]=\"\r\n      src.value\r\n    \"\r\n      alt=\"\"\r\n    />\r\n\r\n  </ngx-focus-point>\r\n</div>\r\n\r\n<ngx-focus-point class=\"small\" [focusX]=\"position?.x\"\r\n                 [focusY]=\"position?.y\"\r\n                 [scale]='position?.s'\r\n>\r\n  <img\r\n    [src]=\"\r\n      src.value\r\n    \"\r\n    alt=\"\"\r\n  />\r\n\r\n</ngx-focus-point>\r\n\r\n\r\n<ngx-focus-point class=\"large\" [focusX]=\"position?.x\"\r\n                 [focusY]=\"position?.y\"\r\n                 [scale]='position?.s'\r\n>\r\n  <img\r\n    [src]=\"\r\n      src.value\r\n    \"\r\n    alt=\"\"\r\n  />\r\n\r\n</ngx-focus-point>\r\n\r\n\r\n<router-outlet></router-outlet>\r\n\r\n\r\n\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-a53fd738b978780d39fb5fcc9ae4cfe0088e57a1f6ce674862d57dab9192140bd1c05548a9910db0469a431142886e658ff2e761f15781b2ad430e58d64724d0",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 786,
                            "end": 799,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 787,
                                "end": 795,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 34,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 50
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-3d494fd89671305c6be07de00e019efdf08f2e36c2169e5fb75a5acdb2841da927e3ef3cbd21cc18f478373a784b1fb90e8b63b9df4b3498a75b652bd9c37b38",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "NgxFocusPointComponent",
            "id": "component-NgxFocusPointComponent-dc8ba93a5d34d698dad7db0abea55034dc7ca03c0459da830df4f4e0166372796b0710b3f71b862f620a10d501ce7836283a7923c40609ea6a0457a0a5a539be",
            "file": "src/app/ngx-focus-point/components/ngx-focus-point/ngx-focus-point.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "OnResizeService",
                    "type": "injectable"
                }
            ],
            "selector": "ngx-focus-point",
            "styleUrls": [
                "./ngx-focus-point.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./ngx-focus-point.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "animation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "focusX",
                    "defaultValue": "0.0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number | undefined",
                    "decorators": []
                },
                {
                    "name": "focusY",
                    "defaultValue": "0.0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "number | undefined",
                    "decorators": []
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "scale",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "number | undefined",
                    "decorators": []
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "error",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "ComponentElements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | undefined",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "containerHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "containerWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "css",
                    "defaultValue": "`\r\n        z-index: inherit;\r\n        position: absolute;\r\n        left: 0;\r\n        top: 0;\r\n        margin: 0;\r\n        padding: 0;\r\n        display: block;\r\n        width: auto;\r\n        height: auto;\r\n        min-width: 100%;\r\n        min-height: 100%;\r\n        max-height: none;\r\n        max-width: none;\r\n        backface-visibility: hidden;\r\n        transform: translate3d(0%, 0%, 0);\r\n    `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "imageErrorSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "imageHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "imagePositionLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imagePositionTop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imageSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "imageWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initCss",
                    "defaultValue": "`transform: none;`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "maxHeight",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "maxWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "MediaElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLImageElement | HTMLVideoElement | undefined",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "platformSvc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlatformService",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "previousSrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "resizeSub$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "adjustFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "calcShift",
                    "args": [
                        {
                            "name": "conToImageRatio",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "containerSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "imageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "focusSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "toMinus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "scale",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "conToImageRatio",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "containerSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "focusSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toMinus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scale",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { OnResizeService } from '../../services/on-resize.service';\r\nimport {PlatformService} from '../../services/platform.service';\r\n\r\n@Component({\r\n  selector: 'ngx-focus-point',\r\n  templateUrl: './ngx-focus-point.component.html',\r\n  styleUrls: ['./ngx-focus-point.component.scss'],\r\n  providers: [OnResizeService],\r\n})\r\nexport class NgxFocusPointComponent implements OnInit, OnDestroy, OnChanges {\r\n  @Input() width?: string;\r\n  @Input() height?: string;\r\n  @Input() focusX: number | undefined = 0.0;\r\n  @Input() focusY: number | undefined = 0.0;\r\n  @Input() animation: string | undefined;\r\n  @Input() scale: number | undefined = 1;\r\n  @Output() error = new EventEmitter<Event>();\r\n  public maxWidth = 0;\r\n  public maxHeight = 0;\r\n  public imagePositionLeft: string | number | undefined;\r\n  public imagePositionTop: string | number | undefined;\r\n  private containerWidth: number | undefined;\r\n  private containerHeight: number | undefined;\r\n  private imageWidth: number | undefined;\r\n  private imageHeight: number | undefined;\r\n  private ComponentElements: HTMLElement | undefined;\r\n  private MediaElement: HTMLImageElement | HTMLVideoElement | undefined;\r\n  private imageSubscription: Subscription | undefined;\r\n  private resizeSub$: Subscription | undefined;\r\n  private imageErrorSubscription: Subscription | undefined;\r\n  private previousSrc: any;\r\n  private css = `\r\n        z-index: inherit;\r\n        position: absolute;\r\n        left: 0;\r\n        top: 0;\r\n        margin: 0;\r\n        padding: 0;\r\n        display: block;\r\n        width: auto;\r\n        height: auto;\r\n        min-width: 100%;\r\n        min-height: 100%;\r\n        max-height: none;\r\n        max-width: none;\r\n        backface-visibility: hidden;\r\n        transform: translate3d(0%, 0%, 0);\r\n    `;\r\n  private initCss = `transform: none;`;\r\n\r\n  constructor(\r\n    private elRef: ElementRef,\r\n    private onResizeSvc: OnResizeService,\r\n    public platformSvc: PlatformService\r\n  ) {\r\n    if (!this.focusX) {\r\n      this.focusX = 0.0;\r\n    }\r\n    if (!this.focusY) {\r\n      this.focusY = 0.0;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.platformSvc.isPlatformBrowser) {\r\n      this.css = this.animation\r\n        ? this.css +\r\n          `transition: left ${this.animation}, top ${this.animation} ease-in-out;`\r\n        : this.css;\r\n\r\n      this.ComponentElements = this.elRef.nativeElement;\r\n      this.MediaElement = this.ComponentElements?.querySelector(\r\n        'img'\r\n      ) as HTMLImageElement;\r\n      if (!this.MediaElement) {\r\n        this.MediaElement = this.ComponentElements?.querySelector(\r\n          'video'\r\n        ) as HTMLVideoElement;\r\n        if (this.MediaElement.hasAttribute('muted')) {\r\n          this.MediaElement.muted = true;\r\n        }\r\n        this.imageErrorSubscription = fromEvent(this.MediaElement, 'error')\r\n          .pipe(tap((error) => this.error.emit(error)))\r\n          .subscribe();\r\n\r\n        this.imageSubscription = fromEvent(this.MediaElement, 'loadeddata')\r\n          .pipe(\r\n            tap((event) => {\r\n              // Prep for when img src changes.\r\n              (this.MediaElement as HTMLElement).style.cssText = this.initCss;\r\n              this.MediaElement?.classList?.add('focus-point');\r\n              (this.MediaElement as HTMLElement).style.cssText = this.css;\r\n              this.imageHeight = this.MediaElement?.offsetHeight;\r\n              this.imageWidth = this.MediaElement?.offsetWidth;\r\n              this.adjustFocus();\r\n              this.previousSrc = this.MediaElement?.getAttribute('src');\r\n            })\r\n          )\r\n          .subscribe();\r\n      } else {\r\n        this.imageErrorSubscription = fromEvent(this.MediaElement, 'error')\r\n          .pipe(tap((error) => this.error.emit(error)))\r\n          .subscribe();\r\n        this.imageSubscription = fromEvent(this.MediaElement, 'load')\r\n          .pipe(\r\n            tap((event) => {\r\n              // Prep for when img src changes.\r\n              (this.MediaElement as HTMLElement).style.cssText = this.initCss;\r\n              this.MediaElement?.classList?.add('focus-point');\r\n              (this.MediaElement as HTMLElement).style.cssText = this.css;\r\n              this.imageHeight = this.MediaElement?.offsetHeight;\r\n              this.imageWidth = this.MediaElement?.offsetWidth;\r\n              this.adjustFocus();\r\n              this.previousSrc = this.MediaElement?.getAttribute('src');\r\n            })\r\n          )\r\n          .subscribe();\r\n      }\r\n\r\n      const elements = this.onResizeSvc.onResize([\r\n        this.ComponentElements as HTMLElement,\r\n      ]);\r\n      this.resizeSub$ = fromEvent(elements[0], 'resize')\r\n        // const resize = new OnResize([this.ComponentElements]);\r\n        // this.resizeSub$ = fromEvent(resize.elements[0], 'resize')\r\n        .pipe(\r\n          tap((event) => {\r\n            this.adjustFocus();\r\n          })\r\n        )\r\n        .subscribe();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.adjustFocus();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    try {\r\n      if (this.imageErrorSubscription) {\r\n        this.imageErrorSubscription.unsubscribe();\r\n      }\r\n      if (this.resizeSub$) {\r\n        this.resizeSub$.unsubscribe();\r\n      }\r\n      if (this.imageSubscription) {\r\n        this.imageSubscription.unsubscribe();\r\n      }\r\n    } catch (e) {\r\n      console.warn(e);\r\n    }\r\n  }\r\n\r\n  // Calculate the new left/top values of an image\r\n  public calcShift(\r\n    conToImageRatio: number,\r\n    containerSize: number,\r\n    imageSize: number,\r\n    focusSize: number,\r\n    toMinus?: boolean,\r\n    scale = 0\r\n  ): number {\r\n    const containerCenter = Math.floor(containerSize / 2); // Container center in px\r\n\r\n    const focusFactor = (focusSize + 1) / 2; // Focus point of resize image in px\r\n\r\n    const scaledImage = Math.floor(imageSize / conToImageRatio); // Can't use width() as images may be display:none\r\n    let focus = Math.floor(focusFactor * scaledImage);\r\n\r\n    if (toMinus) {\r\n      focus = scaledImage - focus;\r\n    }\r\n    let focusOffset = focus - containerCenter; // Calculate difference between focus point and center\r\n    const remainder = scaledImage - focus; // Reduce offset if necessary so image remains filled\r\n    const containerRemainder = containerSize - containerCenter;\r\n    if (remainder < containerRemainder) {\r\n      focusOffset -= containerRemainder - remainder;\r\n    }\r\n\r\n    if (focusOffset < 0) {\r\n      focusOffset = 0;\r\n    }\r\n\r\n    return (focusOffset * -100) / containerSize;\r\n  }\r\n\r\n  private adjustFocus() {\r\n    if (this.ComponentElements) {\r\n      this.containerHeight = this.ComponentElements.offsetHeight;\r\n      this.containerWidth = this.ComponentElements.offsetWidth;\r\n\r\n      let hShift: string | number = 0;\r\n      let vShift: string | number = 0;\r\n\r\n      const wR = (this.imageWidth as number) / this.containerWidth;\r\n      const hR = (this.imageHeight as number) / this.containerHeight;\r\n\r\n      (this.MediaElement as HTMLElement).style.maxHeight = '';\r\n      (this.MediaElement as HTMLElement).style.maxWidth = '';\r\n\r\n      if (\r\n        (this.imageWidth as number) > this.containerWidth &&\r\n        (this.imageHeight as number) > this.containerHeight\r\n      ) {\r\n        if (wR > hR) {\r\n          this.maxHeight = 100;\r\n          (this.MediaElement as HTMLElement).style.maxHeight = '100%';\r\n        } else {\r\n          this.maxWidth = 100;\r\n          (this.MediaElement as HTMLElement).style.maxWidth = '100%';\r\n        }\r\n      }\r\n      if (wR > hR) {\r\n        hShift = this.calcShift(\r\n          hR,\r\n          this.containerWidth,\r\n          this.imageWidth as number,\r\n          parseFloat(!this.focusX ? '0.0' : this.focusX.toString()),\r\n          false,\r\n          this.scale\r\n        );\r\n      } else if (wR < hR) {\r\n        vShift = this.calcShift(\r\n          wR,\r\n          this.containerHeight,\r\n          this.imageHeight as number,\r\n          parseFloat(!this.focusY ? '0.0' : this.focusY.toString()),\r\n          true,\r\n          this.scale\r\n        );\r\n      }\r\n      const Y = parseFloat(!this.focusY ? '0.0' : this.focusY.toString());\r\n      const X = parseFloat(!this.focusX ? '0.0' : this.focusX.toString());\r\n\r\n      if (this.scale && this.scale > 1) {\r\n        // TODO: find max edge.\r\n        (this.MediaElement as HTMLElement).style.transform = `translateX(${\r\n          this.scale * (X * -50)\r\n        }%) translateY(${this.scale * (Y * 50)}%)  scale(${this.scale})`;\r\n        // this.MediaElement.style.transform = `scale(${this.scale})`;\r\n        (this.MediaElement as HTMLElement).style.left = `${hShift}%`;\r\n        (this.MediaElement as HTMLElement).style.top = `${vShift}%`;\r\n        this.imagePositionLeft = hShift;\r\n        this.imagePositionTop = vShift;\r\n      } else {\r\n        // this.MediaElement.style.transform = `translateX(${X}%) translateY(${Y}%) scale(${this.scale})`;\r\n\r\n        (this.MediaElement as HTMLElement).style.left = `${hShift}%`;\r\n        (this.MediaElement as HTMLElement).style.top = `${vShift}%`;\r\n        this.imagePositionLeft = hShift;\r\n        this.imagePositionTop = vShift;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  overflow: hidden;\r\n  position: relative;\r\n  backface-visibility: hidden;\r\n  height: 100%;\r\n  width: 100%;\r\n  background-color: white;\r\n}\r\n",
                    "styleUrl": "./ngx-focus-point.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "onResizeSvc",
                        "type": "OnResizeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformSvc",
                        "type": "PlatformService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "onResizeSvc",
                        "type": "OnResizeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformSvc",
                        "type": "PlatformService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges"
            ],
            "templateData": "<ng-content></ng-content>\r\n"
        },
        {
            "name": "NgxFocusPointSelectComponent",
            "id": "component-NgxFocusPointSelectComponent-f13478abec4d139bc36a273cbda2cb668b993ed51985ec3614ad7d125b99bc60d9d708e07c8982577817a3df448f70980c6bc1e4026743ea69890538acb1ed39",
            "file": "src/app/ngx-focus-point/components/ngx-focus-point-select/ngx-focus-point-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-focus-point-select",
            "styleUrls": [
                "./ngx-focus-point-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./ngx-focus-point-select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "enableScale",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "scale",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "selectPosition",
                    "defaultValue": "{x: 0.0, y: 0.0}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Partial<PositionModel>",
                    "decorators": []
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "positionChange",
                    "defaultValue": "new Subject<PositionModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Subject<PositionModel>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "ComponentElements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | undefined",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "focusPointAttr",
                    "defaultValue": "{\r\n    x: 0,\r\n    y: 0,\r\n    w: 0,\r\n    h: 0,\r\n    s: 0,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PositionModel",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\r\n    slider: new FormControl(0),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imageLoad$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "MediaElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLImageElement | HTMLVideoElement | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "scaleChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "TempImageElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLImageElement | undefined",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getCenter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickFocus",
                    "args": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "truncateDecimals",
                    "args": [
                        {
                            "name": "num",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "digits",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "num",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "digits",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, Input, OnInit, Output} from '@angular/core';\r\nimport {fromEvent, Observable, Subject} from 'rxjs';\r\nimport {tap} from 'rxjs/operators';\r\nimport {PositionModel} from '../../models/position.model';\r\nimport {FormControl, FormGroup} from '@angular/forms';\r\nimport {PlatformService} from '../../services/platform.service';\r\n\r\n@Component({\r\n  selector: 'ngx-focus-point-select',\r\n  templateUrl: './ngx-focus-point-select.component.html',\r\n  styleUrls: ['./ngx-focus-point-select.component.scss'],\r\n})\r\nexport class NgxFocusPointSelectComponent implements OnInit {\r\n  @Input() src: any;\r\n  @Input() selectPosition: Partial<PositionModel> = {x: 0.0, y: 0.0};\r\n  @Input() scale = 1;\r\n  @Input() enableScale = false;\r\n  @Output() positionChange: Subject<PositionModel> = new Subject<PositionModel>();\r\n  public scaleChange: Observable<any> | undefined;\r\n  public form: FormGroup = new FormGroup({\r\n    slider: new FormControl(0),\r\n  });\r\n  public focusPointAttr: PositionModel = {\r\n    x: 0,\r\n    y: 0,\r\n    w: 0,\r\n    h: 0,\r\n    s: 0,\r\n  };\r\n  public imageLoad$: Observable<any> | undefined;\r\n  private ComponentElements: HTMLElement | undefined;\r\n  private MediaElement: HTMLImageElement | HTMLVideoElement | undefined;\r\n  private TempImageElement: HTMLImageElement | undefined;\r\n\r\n  constructor(private platformSvc: PlatformService, private elRef: ElementRef) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.platformSvc.isPlatformBrowser && this.src) {\r\n      this.TempImageElement = document.createElement('img');\r\n      this.ComponentElements = this.elRef.nativeElement;\r\n      this.MediaElement = this.ComponentElements?.querySelector(\r\n        'img'\r\n      ) as HTMLImageElement;\r\n      this.TempImageElement.src = this.src;\r\n\r\n      this.imageLoad$ = fromEvent(this.TempImageElement, 'load').pipe(\r\n        tap((event) => {\r\n          const imageW = this.MediaElement?.clientWidth;\r\n          const imageH = this.MediaElement?.clientHeight;\r\n          this.getCenter();\r\n        }),\r\n      );\r\n      this.scaleChange = this.form.controls['slider'].valueChanges.pipe(\r\n        tap((value) => {\r\n          if (value / 1000 <= 1) {\r\n            this.scale = 1;\r\n          } else {\r\n            this.scale = value / 1000;\r\n          }\r\n          this.positionChange.next({...this.focusPointAttr, s: this.scale});\r\n        }),\r\n      );\r\n    }\r\n  }\r\n\r\n  public onClickFocus(e: MouseEvent) {\r\n    const imageW = this.MediaElement?.clientWidth as number;\r\n    const imageH = this.MediaElement?.clientHeight as number;\r\n    let offsetX;\r\n    let offsetY;\r\n    if (e) {\r\n      offsetX = e.offsetX - (this.MediaElement as HTMLElement).offsetLeft;\r\n      offsetY = e.offsetY - (this.MediaElement as HTMLElement).offsetTop;\r\n    } else {\r\n      offsetX = 0.0 - (this.MediaElement as HTMLElement).offsetLeft;\r\n      offsetY = 0.0 - (this.MediaElement as HTMLElement).offsetTop;\r\n    }\r\n    const focusX = (offsetX / imageW - 0.5) * 2;\r\n    const focusY = (offsetY / imageH - 0.5) * -2;\r\n    this.focusPointAttr.x = this.truncateDecimals(focusX, 2);\r\n    this.focusPointAttr.y = this.truncateDecimals(focusY, 2);\r\n    this.selectPosition.x = (offsetX / imageW) * 100;\r\n    this.selectPosition.y = (offsetY / imageH) * 100;\r\n    this.positionChange.next({...this.focusPointAttr, s: this.scale});\r\n  }\r\n\r\n  public getCenter() {\r\n    const imageW = (this.MediaElement as HTMLElement).clientWidth;\r\n    const imageH = (this.MediaElement as HTMLElement).clientHeight;\r\n    const offsetX = imageW / 2 - (this.MediaElement as HTMLElement).offsetLeft;\r\n    const offsetY = imageH / 2 - (this.MediaElement as HTMLElement).offsetTop;\r\n    this.selectPosition.x = (offsetX / imageW) * 100;\r\n    this.selectPosition.y = (offsetY / imageH) * 100;\r\n  }\r\n\r\n  public truncateDecimals(num: number, digits: number) {\r\n    const multiplier = Math.pow(10, digits);\r\n    const adjustedNum = num * multiplier;\r\n    const truncatedNum = Math[adjustedNum < 0 ? 'ceil' : 'floor'](adjustedNum);\r\n    return truncatedNum / multiplier;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  z-index: 1;\r\n}\r\n\r\n:host .select-container {\r\n  width: fit-content;\r\n  height: inherit;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n:host .select-container .img {\r\n  display: block;\r\n  height: auto;\r\n  width: 100%;\r\n}\r\n\r\n:host .select-container .select {\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 2px solid #fff;\r\n  pointer-events: none;\r\n  position: absolute;\r\n  border-radius: 50%;\r\n  -webkit-transform: translate(-50%, -50%);\r\n  transform: translate(-50%, -50%);\r\n  transition: left 1s, top 1s ease-in-out;\r\n}\r\n",
                    "styleUrl": "./ngx-focus-point-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platformSvc",
                        "type": "PlatformService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "platformSvc",
                        "type": "PlatformService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"imageLoad$ | async\"></ng-container>\r\n<ng-container *ngIf=\"scaleChange | async\"></ng-container>\r\n<div (click)=\"onClickFocus($event)\" class=\"select-container\">\r\n  <img #img [src]=\"src\" alt=\"Select focus point.\" class=\"img\" />\r\n  <div [style.left.%]=\"selectPosition.x\" [style.top.%]=\"selectPosition.y\" class=\"select\"></div>\r\n</div>\r\n<form *ngIf=\"enableScale\" [formGroup]=\"form\">\r\n  <input formControlName=\"slider\" max=\"5000\" min=\"0\" type=\"range\" />\r\n</form>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-badb6d8cee577661da79ba82ad8f599604afd40fa34e36c7b88d71d77a4fbc7184228cba2f0d73e255d0b7bc51c4c7a8e7b0128b3624aeb0255abab9030fa59a",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-d0872390e796aec098f72002d7c3fe952647219c6d93dccd9b07a3ee49598fead0bfaa03539b69512aeee320c745b3928c4796d648582a4e05867cbad2fe5412",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { NgxFocusPointModule } from './ngx-focus-point/ngx-focus-point.module';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    BrowserModule.withServerTransition({ appId: 'serverApp' }),\r\n    AppRoutingModule,\r\n    NgxFocusPointModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "NgxFocusPointModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-8c79f378303019a2e815ade10339a452558c7b0bf28f8ae1f301f4d2f9254d262a403ed072122e669b84619417615b08d3769bb2089e59c85a3fb9e5aeaf1841",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgxFocusPointModule",
            "id": "module-NgxFocusPointModule-46327ff8eadb12506ad5eab99f09cd3b2bf5b7a8315585ff8715bd2da0d47ac9032c7ac289d133ce86bca7720f082cbd07598a917ddc464d776a4648f1ce0dd6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/ngx-focus-point/ngx-focus-point.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgxFocusPointComponent} from './components/ngx-focus-point/ngx-focus-point.component';\r\nimport {NgxFocusPointSelectComponent} from './components/ngx-focus-point-select/ngx-focus-point-select.component';\r\nimport {ReactiveFormsModule} from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [NgxFocusPointComponent, NgxFocusPointSelectComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule\r\n  ], exports: [NgxFocusPointComponent, NgxFocusPointSelectComponent]\r\n})\r\nexport class NgxFocusPointModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgxFocusPointComponent"
                        },
                        {
                            "name": "NgxFocusPointSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgxFocusPointComponent"
                        },
                        {
                            "name": "NgxFocusPointSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "FocusPoint",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/ngx-focus-point/components/ngx-focus-point/ngx-focus-point.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryObj<StoryType>",
                "defaultValue": "{\r\n  args: {\r\n    focusX:0,\r\n    focusY:0,\r\n  }\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "StoryType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "NgxFocusPointComponent",
                "file": "src/app/ngx-focus-point/components/ngx-focus-point/ngx-focus-point.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/ngx-focus-point/components/ngx-focus-point/ngx-focus-point.component.stories.ts": [
                {
                    "name": "FocusPoint",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/ngx-focus-point/components/ngx-focus-point/ngx-focus-point.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryObj<StoryType>",
                    "defaultValue": "{\r\n  args: {\r\n    focusX:0,\r\n    focusY:0,\r\n  }\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/ngx-focus-point/components/ngx-focus-point/ngx-focus-point.component.stories.ts": [
                {
                    "name": "StoryType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "NgxFocusPointComponent",
                    "file": "src/app/ngx-focus-point/components/ngx-focus-point/ngx-focus-point.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/ngx-focus-point/components/ngx-focus-point-select/ngx-focus-point-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgxFocusPointSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/ngx-focus-point/components/ngx-focus-point/ngx-focus-point.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FocusPoint",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ngx-focus-point/components/ngx-focus-point/ngx-focus-point.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgxFocusPointComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "src/app/ngx-focus-point/models/position.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PositionModel",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/ngx-focus-point/services/on-resize.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OnResizeService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/ngx-focus-point/services/on-resize.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/ngx-focus-point/services/platform.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PlatformService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}